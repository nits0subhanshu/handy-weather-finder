{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\aw\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\aw\\\\frontend\\\\src\\\\context\\\\wheater\\\\state.js\";\n// Imports:\nimport React, { useReducer } from 'react'; // Context & Reducer:\n\nimport WeatherContext from './context';\nimport weatherReducer from './reducer'; // Action types:\n\nimport { UPDATE_WEATHER, SET_LOADING } from '../types'; // Others:\n\nimport { openWeatherMap, apache } from '../../config/api'; // Actions:\n\nconst WeatherState = props => {\n  // Initial state:\n  const INITIAL_STATE = {\n    city: undefined,\n    country: undefined,\n    hours: [],\n    error: undefined,\n    loading: false\n  };\n\n  const _useReducer = useReducer(weatherReducer, INITIAL_STATE),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Set Loading:\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  }); // Get weather:\n\n\n  const getWeather = async event => {\n    event.preventDefault();\n    const city = event.target.city.value;\n    const country = event.target.country.value;\n    const hasNumber = /\\d/;\n    const API_KEY = process.env.REACT_APP_API_KEY;\n    if (hasNumber.test(city) || hasNumber.test(country)) dispatch({\n      type: UPDATE_WEATHER,\n      payload: {\n        city: undefined,\n        country: undefined,\n        hours: [],\n        error: 'Invalid value'\n      }\n    });\n\n    if (city && country) {\n      setLoading();\n      const response = await openWeatherMap.get(\"?q=\".concat(city, \",\").concat(country, \"&appid=e5fee25aac53c6f589e734a9c1d8bbf3\"));\n\n      if (response.cod === '404') {\n        dispatch({\n          type: UPDATE_WEATHER,\n          payload: {\n            city: undefined,\n            country: undefined,\n            hours: [],\n            error: response.message,\n            loading: true\n          }\n        });\n      } else {\n        const data = response.data;\n        dispatch({\n          type: UPDATE_WEATHER,\n          payload: {\n            city: data.city.name,\n            country: data.city.country,\n            hours: data.list,\n            error: undefined,\n            loading: true\n          }\n        }); // Request to PHP server:  \n\n        await apache.post('victor/weather-app/backend/index.php', {\n          dados: data\n        });\n      }\n    } else {\n      dispatch({\n        type: UPDATE_WEATHER,\n        payload: {\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          hours: [],\n          error: 'Invalid inputs'\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(WeatherContext.Provider, {\n    value: {\n      // State props:\n      weather: state,\n      // Actions:\n      getWeather\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default WeatherState;","map":{"version":3,"sources":["C:/xampp/htdocs/aw/frontend/src/context/wheater/state.js"],"names":["React","useReducer","WeatherContext","weatherReducer","UPDATE_WEATHER","SET_LOADING","openWeatherMap","apache","WeatherState","props","INITIAL_STATE","city","undefined","country","hours","error","loading","state","dispatch","setLoading","type","getWeather","event","preventDefault","target","value","hasNumber","API_KEY","process","env","REACT_APP_API_KEY","test","payload","response","get","cod","message","data","name","list","post","dados","temperature","weather","children"],"mappings":"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","sourcesContent":["// Imports:\nimport React, { useReducer } from 'react'\n\n// Context & Reducer:\nimport WeatherContext from './context'\nimport weatherReducer from './reducer'\n\n// Action types:\nimport { UPDATE_WEATHER, SET_LOADING } from '../types'\n\n// Others:\nimport { openWeatherMap, apache } from '../../config/api'\n\n// Actions:\nconst WeatherState = props => {\n  // Initial state:\n  const INITIAL_STATE = {\n    city: undefined,\n    country: undefined,\n    hours: [],\n    error: undefined,\n    loading: false\n  }\n\n  const [state, dispatch] = useReducer(weatherReducer, INITIAL_STATE)\n\n  // Set Loading:\n  const setLoading = () => dispatch({ type: SET_LOADING })\n\n  // Get weather:\n  const getWeather = async event => {\n    event.preventDefault()\n    const city = event.target.city.value\n    const country = event.target.country.value\n    const hasNumber = /\\d/\n    const API_KEY = process.env.REACT_APP_API_KEY\n    if (hasNumber.test(city) || hasNumber.test(country)) dispatch({ \n      type: UPDATE_WEATHER,\n      payload: {\n        city: undefined,\n        country: undefined,\n        hours: [],\n        error: 'Invalid value'\n      }\n    })\n    if (city && country) {\n      setLoading()\n      const response = await openWeatherMap.get(`?q=${city},${country}&appid=e5fee25aac53c6f589e734a9c1d8bbf3`)\n      if (response.cod === '404') {\n        dispatch({\n          type: UPDATE_WEATHER,\n          payload: {\n            city: undefined,\n            country: undefined,\n            hours: [],\n            error: response.message,\n            loading: true\n          }\n        })\n        \n      } else {\n        const { data } = response \n        dispatch({\n          type: UPDATE_WEATHER,\n          payload: {\n            city: data.city.name,\n            country: data.city.country,\n            hours: data.list,\n            error: undefined,\n            loading: true\n          }\n        })\n        // Request to PHP server:  \n        await apache.post('victor/weather-app/backend/index.php', { dados: data })\n      }\n    } else {\n      dispatch({\n        type: UPDATE_WEATHER,\n        payload: {\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          hours: [],\n          error: 'Invalid inputs'\n        }\n      })\n    }\n  }\n\n  return (\n    <WeatherContext.Provider value={{\n      // State props:\n      weather: state,\n      // Actions:\n      getWeather\n    }}>\n      {props.children}\n    </WeatherContext.Provider>\n  )\n}\n\nexport default WeatherState\n"]},"metadata":{},"sourceType":"module"}